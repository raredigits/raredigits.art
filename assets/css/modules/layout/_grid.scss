@use "../utilities/breakpoints" as *;

:root {
    --base-unit: 16px;
    --grid-columns: 12;
    --grid-gap: var(--base-unit);
    --grid-columns-global: repeat(12, 1fr);
    --grid-columns-global-mobile: repeat(6, 1fr);
    --grid-gap-global: var(--base-unit);

    --global-fr: calc((var(--site-max-width) - (11 * var(--grid-gap-global))) / 12);
}

.grid {
    display: grid;
    grid-template-columns: repeat(var(--grid-columns), 1fr);
    gap: var(--grid-gap);
    width: 100%;

    @include mobile {
        --grid-columns: 6;
        --grid-gap: var(--space-xs);
    }
}

.grid-global {
    display: grid;
    grid-template-columns: var(--grid-columns-global);
    gap: var(--grid-gap-global);

    @include mobile {
        grid-template-columns: var(--grid-columns-global-mobile);
        gap: var(--space-xs);
    }
}

.grid-global-fixed {
    display: grid;
    grid-template-columns: var(--grid-columns-global);
    gap: var(--grid-gap-global);
}

.grid-mobile {
    display: grid;
    grid-template-columns: var(--grid-columns-global-mobile);
    gap: var(--global-grid-gap);
}

.auto-cols-fr { grid-auto-columns: 1fr; }
.auto-rows-fr { grid-auto-rows: 1fr; }

// COLUMNS

@mixin generate-grid-cols($prefix: "") {
    @for $i from 1 through 12 {
      .#{$prefix}grid-cols-#{$i} {
        --grid-columns: #{$i};
      }
    }

    .#{$prefix}col-span-full {
      grid-column: 1 / -1;
    }
}

@include generate-grid-cols();

@include mobile {
  @include generate-grid-cols("mobile\\:");
}

@include tablet {
  @include generate-grid-cols("tablet\\:");
}

@include desktop {
  @include generate-grid-cols("desktop\\:");
}

@for $i from 1 through 12 {
    .col-span-#{$i} {
      grid-column: span $i;
    }

    @include mobile {
        .mobile\:col-span-#{$i} {
          grid-column: span #{$i};
        }
      }
    
      @include tablet {
        .tablet\:col-span-#{$i} {
          grid-column: span #{$i};
        }
      }
    
      @include desktop {
        .desktop\:col-span-#{$i} {
          grid-column: span #{$i};
        }
      }
}

@mixin generate-col-position($type, $max) {
    $base-class: if($type == 'start', 'col-start', 'col-end');
  
    @for $i from 1 through $max {
      .#{$base-class}-#{$i} {
        grid-column-#{$type}: $i;
      }
  
      @include mobile {
        .mobile\:#{$base-class}-#{$i} {
          grid-column-#{$type}: $i;
        }
      }
  
      @include tablet {
        .tablet\:#{$base-class}-#{$i} {
          grid-column-#{$type}: $i;
        }
      }
  
      @include desktop {
        .desktop\:#{$base-class}-#{$i} {
          grid-column-#{$type}: $i;
        }
      }
    }
}

@include generate-col-position('start', 12);
@include generate-col-position('end', 13);

// ROWS

.grid-rows-1 { grid-template-rows: repeat(1, 1fr); }
.grid-rows-2 { grid-template-rows: repeat(2, 1fr); }
.grid-rows-3 { grid-template-rows: repeat(3, 1fr); }
.grid-rows-4 { grid-template-rows: repeat(4, 1fr); }

.row-span-full {
    grid-row: 1 / -1;
}

@for $i from 1 through 6 {
    .row-span-#{$i} {
      grid-row: span $i;
    }
}

@for $i from 1 through 6 {
    .row-start-#{$i} {
      grid-row-start: $i;
    }
    
    .row-end-#{$i} {
      grid-row-end: $i;
    }
}

// GAPS

.gap-none { gap: 0; }
.gap-xs { gap: var(--space-xs); }
.gap-sm { gap: var(--space-sm); }
.gap-md { gap: var(--space-md); }
.gap-lg { gap: var(--space-lg); }
.gap-xl { gap: var(--space-xl); }

// ALIGN

.grid-flow-row { grid-auto-flow: row; }
.grid-flow-col { grid-auto-flow: column; }
.grid-flow-dense { grid-auto-flow: dense; }

.items-start { align-items: start; }
.items-center { align-items: center; }
.items-end { align-items: end; }
.items-stretch { align-items: stretch; }

.justify-items-start { justify-items: start; }
.justify-items-center { justify-items: center; }
.justify-items-end { justify-items: end; }
.justify-items-stretch { justify-items: stretch; }

.grid-center {
    place-items: center;
}

// FRACTIONS

@function calculate-fr($count, $gap-count) {
    @return calc((var(--global-fr) * #{$count}) + (var(--grid-gap-global) * #{$gap-count}));
}
  
:root {
    @for $i from 1 through 12 {
        --global-fr-#{$i}: #{calculate-fr($i, $i - 1)};
    }
}

.fr {
    width: var(--global-fr);
}

@for $i from 2 through 12 {
    .fr-#{$i} {
      width: var(--global-fr-#{$i});
    }
}

@include tablet {
    :root {
        --global-fr: calc((100vw - (11 * var(--grid-gap-global))) / 12);
    }
}

@include mobile {
    :root {
        --global-fr: calc((100vw - (5 * var(--grid-gap-global))) / 6);
    }

    .grid-global-fixed {
        grid-template-columns: var(--grid-columns-global);
    }
}